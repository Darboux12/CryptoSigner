import React, { useState } from 'react';
import { Button, Form, Container, Row, Col, Spinner, Alert } from 'react-bootstrap';
import './VulnerabilityScanner.css';
import VulnerabilityImage from "../../assets/Vulnerability.webp";
import { sendVulnerabilityScan } from "../api/apiService";

const VulnerabilityScanner = () => {
    const [groupId, setGroupId] = useState('');
    const [artifactId, setArtifactId] = useState('');
    const [version, setVersion] = useState('');
    const [isScanning, setIsScanning] = useState(false);
    const [scanSuccess, setScanSuccess] = useState(false);
    const [useXML, setUseXML] = useState(false);
    const [xmlInput, setXmlInput] = useState('');
    const [error, setError] = useState('');
    const [validationError, setValidationError] = useState('');

    const descriptionStyle = {
        fontWeight: "normal",
        color: "#ccc",
        marginTop: '20px',
    };

    const formControlStyle = {
        backgroundColor: "#333",
        color: "#eee",
        borderColor: "#555",
    };

    const validateInput = () => {
        if (useXML) {
            if (!xmlInput.trim()) {
                setValidationError('XML input cannot be empty.');
                return false;
            }
        } else {
            if (!groupId.trim() || !artifactId.trim() || !version.trim()) {
                setValidationError('All fields must be filled.');
                return false;
            }
        }
        setValidationError('');
        return true;
    };

    const parseXmlInput = () => {
        try {
            const parser = new DOMParser();
            const xmlDoc = parser.parseFromString(xmlInput, "text/xml");
            const dependency = xmlDoc.querySelector("dependency");
            if (!dependency) {
                throw new Error("No <dependency> element found.");
            }

            const groupId = dependency.querySelector("groupId")?.textContent || "";
            const artifactId = dependency.querySelector("artifactId")?.textContent || "";
            const version = dependency.querySelector("version")?.textContent || "";

            return { groupId, artifactId, version };
        } catch (err) {
            console.error(`Error parsing XML: ${err.message}`);
            setError(`Error parsing XML: ${err.message}`);
            throw err;
        }
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setError('');

        if (!validateInput()) {
            return;
        }

        setIsScanning(true);

        setTimeout(async () => {
            try {
                if (useXML) {
                    const { groupId: xmlGroupId, artifactId: xmlArtifactId, version: xmlVersion } = parseXmlInput();
                    await sendVulnerabilityScan(xmlGroupId, xmlArtifactId, xmlVersion);
                } else {
                    await sendVulnerabilityScan(groupId, artifactId, version);
                }
                setScanSuccess(true);
            } catch (err) {
                console.error('Error during scan:', err);
                setError(`Error during scan: ${err.message || "Please try again."}`);
            } finally {
                setIsScanning(false);
            }
        }, 2000);
    };

    return (
        <Container fluid className="scanner-container">
            <Row className="my-4">
                <Col md={5} className="offset-md-1">
                    <h2>Vulnerabilities Scanner</h2>
                    <p style={descriptionStyle}>
                        In the fast-paced world of software development, security takes precedence. With the increasing complexity of applications, it's crucial to ensure that your Maven dependencies are free from known vulnerabilities. That's where our tool steps in, offering a comprehensive scan to detect vulnerabilities that could compromise your application's integrity. Don't let vulnerabilities go unnoticed. Secure your project today.
                    </p>
                    <p className="powered-by">
                        Powered by: <a href="https://ossindex.sonatype.org/" target="_blank" rel="noopener noreferrer" className="highlight">Sonatype OSS Index</a>
                    </p>
                    <Form.Check
                        type="switch"
                        id="custom-switch"
                        label={useXML ? "XML Input" : "Form Input"}
                        checked={useXML}
                        onChange={() => setUseXML(!useXML)}
                        className="mb-3"
                    />
                    {validationError && <Alert variant="danger">{validationError}</Alert>}
                    {error && <Alert variant="danger">{error}</Alert>}
                    <Form onSubmit={handleSubmit}>
                        {useXML ? (
                            <Form.Group className="mb-3">
                                <Form.Label>XML Input</Form.Label>
                                <Form.Control as="textarea" rows={5} value={xmlInput} onChange={(e) => setXmlInput(e.target.value)} placeholder="<dependency>...</dependency>" style={formControlStyle}/>
                            </Form.Group>
                        ) : (
                            <>
                                <Form.Group className="mb-3" controlId="formGroupId">
                                    <Form.Label>GroupId</Form.Label>
                                    <Form.Control type="text" placeholder="Enter GroupId" value={groupId} onChange={(e) => setGroupId(e.target.value)} style={formControlStyle} />
                                </Form.Group>

                                <Form.Group className="mb-3" controlId="formArtifactId">
                                    <Form.Label>ArtifactId</Form.Label>
                                    <Form.Control type="text" placeholder="Enter ArtifactId" value={artifactId} onChange={(e) => setArtifactId(e.target.value)} style={formControlStyle} />
                                </Form.Group>

                                <Form.Group className="mb-3" controlId="formVersion">
                                    <Form.Label>Version</Form.Label>
                                    <Form.Control type="text" placeholder="Enter Version" value={version} onChange={(e) => setVersion(e.target.value)} style={formControlStyle} />
                                </Form.Group>
                            </>
                        )}
                        <Button variant="outline-info" type="submit" disabled={isScanning}>
                            {isScanning ? (
                                <>
                                    <Spinner as="span" animation="border" size="sm" role="status" aria-hidden="true" />
                                    <span className="ms-2">Scanning...</span>
                                </>
                            ) : "Scan Vulnerabilities"}
                        </Button>
                        {scanSuccess && !isScanning && (
                            <Alert variant="success" style={{ marginTop: "10px" }}>
                                Scan successfully started... Please check your user profile for results!
                            </Alert>
                        )}
                    </Form>
                </Col>
                <Col md={5}>
                    <img src={VulnerabilityImage} alt="Vulnerability Scan Visual" className="img-fluid" />
                </Col>
            </Row>
        </Container>
    );
};

export default VulnerabilityScanner;
